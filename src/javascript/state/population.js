/**
 * Functions for handling building information
 */

import Buildings from '../definitions/Buildings.js'
import Races from '../definitions/Races.js';
import Terrains from '../definitions/terrain/Terrains.js';

/**
 * Updates the population info for one game turn
 * TODO: Use passed in game state
 */
function update(oldUserState, newUserState) {
    const currentCount = oldUserState.population.count;
    const growthRate = calculatePopulationGrowthRate(oldUserState);
    const newCount = Math.max(0, currentCount + growthRate);
    console.log("Updating population from [" + currentCount + "] by [" + growthRate + "] to [" + newCount + "]");

    newUserState.population.count = newCount;
}

function calculatePopulationGrowthRate(userState) {
    const populationUnits = calculatePopulationUnits(userState);
    const foodProduced = calculateFoodGenerated(userState);

    var baseRate = Math.ceil((foodProduced - populationUnits) / 2.0) * 10;
    if (userState.city.hasAdditionalRace(Races.LIZARDMAN)) {
        baseRate += 10;
    }

    return baseRate;
}

function calculatePopulationUnits(userState) {
    return Math.floor(userState.population.count / 1000.0);
}

function getPopulationRebelUnits(userState) {
    // TODO: this
    return 1;
}

function calculateNumRequiredFarmers(userState) {
    const numRequiredFood = calculateNumRequiredFood(userState);
    var baseFoodLevel = calculateBaseFoodLevel(userState);
    const foodPerFarmer = calculateFoodPerFarmer(userState);

    var producedFood = userState.construction.isCompleted(Buildings.FORESTERS_GUILD) ? 2 : 0;
    if (producedFood > baseFoodLevel) {
        // If producedFood exceeds base food level, all excess if halved
        producedFood -= ((producedFood - baseFoodLevel) * 0.5);
    }

    producedFood += userState.construction.isCompleted(Buildings.GRANARY) ? 2 : 0;
    producedFood += userState.construction.isCompleted(Buildings.FARMERS_MARKET) ? 3 : 0;
    producedFood *= 1; // 2 for each Wild game in the city's catchment area

    const totalGeneratedFood = baseFoodLevel + producedFood;
    const neededFarmedFood = numRequiredFood - totalGeneratedFood;

    if (neededFarmedFood <= 0) {
        return 0;
    }

    // The farmer that produce up to baseFoodLevel produce the full amount
    // The farmers producing any amount past that produce at half level
    // So, generate the number of farmers if they all produced at the full amount
    const farmersNeededIfAllFull =  Math.ceil(neededFarmedFood / foodPerFarmer);

    // If the amount we need to farm is less than the base amount, we're good
    if (neededFarmedFood <= baseFoodLevel) {
        return farmersNeededIfAllFull;
    }

    // Then halve the amount over base that was created
    // And calculate how many _more_ we need at half production
    const foodProduceIfAllFull = farmersNeededIfAllFull * foodPerFarmer;
    const foodProducedOverBase = foodProduceIfAllFull - baseFoodLevel;
    if (foodProducedOverBase <= 0) {
        console.log("WARNING: food produced over base was not positive", foodProducedOverBase);
        return farmersNeededIfAllFull;
    }

    const farmersNeededForHalfProduction = Math.ceil(
        (foodProducedOverBase * 0.5) // the half of the "over base" that needs to be farmed
        / (foodPerFarmer / 2.0));    // farmers over base produce at half level

    return farmersNeededIfAllFull + farmersNeededForHalfProduction;
}

function calculateNumRequiredFood(userState) {
    // It's pretty much always one food per unit, unless we have some modifier
    // In theory, each normal unit uses one food too... but not sure how we're handling units yet
    // TODO: add in the amount used by normal units (ie, combat units)
    return calculatePopulationUnits(userState);
}

/*
 * Returns the number of food that is generated per farmer
 */
function calculateFoodPerFarmer(userState) {
    const hasAnimistsGuild = userState.construction.isCompleted(Buildings.ANIMISTS_GUILD);
    const isHalfling = userState.city.isRace(Races.HALFLING);
    const hasHalflings = userState.city.hasAdditionalRace(Races.HALFLING);

    const foodPerFarmer = (hasAnimistsGuild || isHalfling) ? 3
        : hasHalflings ? 2.5
        : 2;
    return foodPerFarmer;
}

function calculateNumRioters() {
    return 1;
}

/**
 * Returns the amount of food generated by the various sourcea
 * - base food level (the the land, etc)
 * - required farmers + optional farmers
 * - other buildings and the like
 * There's 2 categories of produced food
 * - weighted - food generation that, if over the base food level, if halved
 * - unweighted - food generation that is not reduced by being over the base food level
 */
function calculateFoodGenerated(userState) {
    var baseFoodLevel = calculateBaseFoodLevel(userState);

    const foodPerFarmer = calculateFoodPerFarmer(userState);
    const totalFarmers = calculateNumRequiredFarmers(userState) + userState.population.numOptionalFarmers;

    // The amount of farmed and weighted produced food if every farmer is working at max production
    const maxFarmedFood = totalFarmers * foodPerFarmer;
    const maxWeightedFood = maxFarmedFood + (userState.construction.isCompleted(Buildings.FORESTERS_GUILD) ? 2 : 0);

    // The amount of weighted food generated after reducing by half the amount over the base food level
    const weightedFood = (maxWeightedFood <= baseFoodLevel) ? baseFoodLevel
        : maxWeightedFood - ((maxWeightedFood - baseFoodLevel) / 2.0);

    // Now we move on to the unweighted food generation types
    const granaryFood = userState.construction.isCompleted(Buildings.GRANARY) ? 2 : 0;
    const marketFood = userState.construction.isCompleted(Buildings.FARMERS_MARKET) ? 3 : 0;
    const wildGameModifier = 1; //TODO:  2 for each Wild game in the city's catchment area
    const unweightedFood = (granaryFood + marketFood) * wildGameModifier;

    const totalFoodProduced = baseFoodLevel + weightedFood + unweightedFood;
    return totalFoodProduced;
}

/**
 * Returns the base amount of food generated by the user's city
 * TODO: This
 */
function calculateBaseFoodLevel(userState) {
    const countTerrains = function(terrains) {
        return userState.city.terrains
            .filter(terrain => terrains.includes(terrain))
            .length;
    }
    var baseFoodLevel =
        (0.5 * countTerrains([Terrains.FOREST, Terrains.HILLS, Terrains.SHORE])) // 0.5 for each Forest, Hill, or Shore in its catchment area
        + (1.5 * countTerrains([Terrains.GRASSLAND])) // 1.5 for each Grassland in its catchment area
        + (2 * countTerrains([Terrains.RIVER, Terrains.RIVER_MOUTH])) // 2 for each River, River Mouth, or Sorcery Node in its catchment area
        + (2 * 0) // 2 for each Sorcery Node in catchment
        + (2.5 * 0) // 2 for each Nature Node in catchment
    if (false) {// if the city has Gaia's Blessing case on it
        baseFoodLevel *= 1.5;
    }
    //console.log("Base food level", baseFoodLevel);
    return baseFoodLevel;
}



// -- EXPORTS --

export {
    update,

    calculateNumRequiredFarmers,
    calculateFoodPerFarmer,
    calculateBaseFoodLevel,

    calculateNumRioters,
    calculatePopulationUnits,
    calculatePopulationGrowthRate,
    };

