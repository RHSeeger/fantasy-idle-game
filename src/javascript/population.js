/**
 * Functions for handling building information
 */

import * as Game from './game.js';
import * as Buildings from './buildings.js';

export const RACES = {
    HUMAN: 'human',
    HALFLING: 'halfling',
    LIZARDMAN: 'lizardman'
};

const STARTING_VALUES =  {
    count: 20000 // TODO: change to 3000, we just need a bigger number for testing
};

$(document).ready(function() {
    const UPDATE_INTERVAL = 10000; // every 10 seconds
    const actualUpdateSpeed = Math.ceil(UPDATE_INTERVAL / Game.getDebugSpeed());
    var updateIntervalId = window.setInterval(updatePopulationCount, actualUpdateSpeed);
    console.log("population setup complete, with update speed (" + actualUpdateSpeed + ")");
});


function updatePopulationCount() {
    if (Game.isPaused() === true) {
        return;
    }

    const currentCount =  getPopulationCount();
    const growthRate = getPopulationGrowthRate();
    const newCount = Math.max(0, currentCount + growthRate);
    console.log("Updating population from [" + currentCount + "] by [" + growthRate + "] to [" + newCount + "]");
    setPopulationCount(newCount);
}

function getPopulationGrowthRate() {
    const populationUnits = getPopulationUnits();
    const foodProduced = calculateFoodGenerated();
    console.log("Food produced == " + foodProduced);

    var baseRate = Math.ceil((foodProduced - populationUnits) / 2.0) * 10;
    if (hasRace(RACES.LIZARDMAN)) {
        baseRate += 10;
    }

    return baseRate;
}

function calculateBaseFoodLevel() {
    var baseFoodLevel =
        (0.5 * 0) // 0.5 for each Forest, Gill, or Short in its catchment area
        + (1.5 * 0) // 1.5 for each Grassland in its catchment area
        + (2 * 0) // 2 for each River, River Mouth, or Sorcery Node in its catchment area
        + (2.5 * 0); // 2.5 for each Nature Node in its catchment area
    if (false) {// if the city has Gaia's Blessing case on it
        baseFoodLevel *= 1.5;
    }

    return baseFoodLevel;
}

/**
 * Returns the amount of food generated by the various source
 * - base food level (the the land, etc)
 * - required farmers + optional farmers
 * - other buildings and the like
 * There's 2 categories of produced food
 * - weighted - food generation that, if over the base food level, if halved
 * - unweighted - food generation that is not reduced by being over the base food level
 */
function calculateFoodGenerated() {
    var baseFoodLevel = calculateBaseFoodLevel();

    const foodPerFarmer = getFoodPerFarmer();
    const totalFarmers = getNumRequiredFarmers() + getNumOptionalFarmers();

    // The amount of farmed and weighted produced food if every farmer is working at max production
    const maxFarmedFood = totalFarmers * foodPerFarmer;
    const maxWeightedFood = maxFarmedFood + (Buildings.hasBuilding(Buildings.BUILDINGS.FORESTERS_GUILD) ? 2 : 0);

    // The amount of weighted food generated after reducing by half the amount over the base food level
    const weightedFood = (maxWeightedFood <= baseFoodLevel) ? baseFoodLevel
        : maxWeightedFood - ((maxWeightedFood - baseFoodLevel) / 2.0);

    // Now we move on to the unweighted food generation types
    const granaryFood = Buildings.hasBuilding(Buildings.BUILDINGS.GRANARY) ? 2 : 0;
    const marketFood = Buildings.hasBuilding(Buildings.BUILDINGS.FARMERS_MARKET) ? 3 : 0;
    const wildGameModifier = 1; //TODO:  2 for each Wild game in the city's catchment area
    const unweightedFood = (granaryFood + marketFood) * wildGameModifier;

    const totalFoodProduced = baseFoodLevel + weightedFood + unweightedFood;

    //console.log("numRequiredFarmers = [" + getNumRequiredFarmers() + "]"
    //    + ", numOptionalFarmers = [" + getNumOptionalFarmers() + "]"
    //    + ", foodPerFarmer = [" + foodPerFarmer + "]"
    //    + ", numFarmedFood = [" + farmedFoodIfAllFullProduction + "]"
    //    + ", baseFoodLevel = [" + baseFoodLevel + "]"
    //    + ", producedFood = [" + producedFood + "]"
    //    + ", totalFoodProduced = [" + totalFoodProduced + "]");

    return totalFoodProduced;
}

function getPopulationCount() {
    const userData = Game.getUserState();
    if (!(userData.hasOwnProperty('population'))) {
        userData['population'] = STARTING_VALUES;
    }
    return userData['population'].count;
}

function setPopulationCount(count) {
    const userData = Game.getUserState();
    if (!(userData.hasOwnProperty('population'))) {
        userData['population'] = STARTING_VALUES;
    }
    userData['population'].count = count;

    return count;
}

function getPopulationUnits() {
    return Math.floor(getPopulationCount() / 1000.0);
}

function hasRace(race) {
    return true;
}

function getNumRequiredFarmers() {
    const numRequiredFood = getNumRequiredFood();

    var baseFoodLevel = calculateBaseFoodLevel();

    const foodPerFarmer = getFoodPerFarmer();

    var producedFood = Buildings.hasBuilding(Buildings.BUILDINGS.FORESTERS_GUILD) ? 2 : 0;
    if (producedFood > baseFoodLevel) {
        // If producedFood exceeds base food level, all excess if halved
        producedFood -= ((producedFood - baseFoodLevel) * 0.5);
    }

    producedFood += Buildings.hasBuilding(Buildings.BUILDINGS.GRANARY) ? 2 : 0;
    producedFood += Buildings.hasBuilding(Buildings.BUILDINGS.FARMERS_MARKET) ? 3 : 0;
    producedFood *= 1; // 2 for each Wild game in the city's catchment area

    const totalGeneratedFood = baseFoodLevel + producedFood;
    const neededFarmedFood = numRequiredFood - totalGeneratedFood;

    if (neededFarmedFood <= 0) {
        return 0;
    }

    // The farmer that produce up to baseFoodLevel produce the full amount
    // The farmers producing any amount past that produce at half level
    // So, generate the number of farmers if they all produced at the full amount
    const farmersNeededIfAllFull =  Math.ceil(neededFarmedFood / foodPerFarmer);

    // If the amount we need to farm is less than the base amount, we're good
    if (neededFarmedFood <= baseFoodLevel) {
        return farmersNeededIfAllFull;
    }

    // Then halve the amount over base that was created
    // And calculate how many _more_ we need at half production
    const foodProduceIfAllFull = farmersNeededIfAllFull * foodPerFarmer;
    const foodProducedOverBase = foodProduceIfAllFull - baseFoodLevel;
    if (foodProducedOverBase <= 0) {
        console.log("WARNING: food produced over base was not positive", foodProducedOverBase);
        return farmersNeededIfAllFull;
    }
    const farmersNeededForHalfProduction = Math.ceil(
        (foodProducedOverBase * 0.5) // the half of the "over base" that needs to be farmed
        / (foodPerFarmer / 2.0));    // farmers over base produce at half level

    return farmersNeededIfAllFull + farmersNeededForHalfProduction;
}

function getNumRequiredFood() {
    // It's pretty much always one food per unit, unless we have some modifier
    // In theory, each normal unit uses one food too... but not sure how we're handling units yet
    return getPopulationUnits();
}

function getFoodPerFarmer() {
    const hasAnimistsGuild = Buildings.hasBuilding(Buildings.BUILDINGS.ANIMISTS_GUILD);
    const hasHalflings = hasRace(RACES.HALFLING);
    const foodPerFarmer = (hasAnimistsGuild || hasHalflings) ? 3 : 2;

    return foodPerFarmer;
}

function getNumOptionalFarmers() {
    return 2;
}

// -- EXPORTS --

export { getPopulationCount, setPopulationCount, getPopulationUnits, hasRace, getNumRequiredFarmers, getNumOptionalFarmers };

